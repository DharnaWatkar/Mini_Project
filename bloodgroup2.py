# -*- coding: utf-8 -*-
"""bloodGroup2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hgnsQQ-eev09PdngsvkpTLuxCzaY6XWp
"""

# ‚úÖ Import Libraries
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, Flatten, Dropout, GlobalAveragePooling2D
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
import os

# ‚úÖ Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

# ‚úÖ Set Dataset Path (Change if needed)
DATASET_PATH = "/content/drive/MyDrive/fingerPrintdata"

# ‚úÖ Image Parameters
IMG_SIZE = (128, 128)  # ‚è© Optimized for speed
BATCH_SIZE = 32  # ‚è© Faster training with smaller batches

# ‚úÖ Data Augmentation & Efficient Loading
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=10,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.1,
    horizontal_flip=True,
    validation_split=0.2  # 80% Train, 20% Validation
)

train_data = train_datagen.flow_from_directory(
    DATASET_PATH,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training'
)

val_data = train_datagen.flow_from_directory(
    DATASET_PATH,
    target_size=IMG_SIZE,
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation'
)

# ‚úÖ Transfer Learning (MobileNetV2)
base_model = MobileNetV2(input_shape=(128, 128, 3), include_top=False, weights='imagenet')
base_model.trainable = False  # Freeze base model

# ‚úÖ Custom Model on Top
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
x = Dropout(0.3)(x)
predictions = Dense(train_data.num_classes, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)
model.compile(optimizer=Adam(learning_rate=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

# ‚úÖ Train Model
model.fit(train_data, validation_data=val_data, epochs=10)

# ‚úÖ Save Model
model.save("/content/drive/MyDrive/blood_group_classifier.h5")
print("‚úÖ Model saved successfully!")

# =========================
# ‚úÖ Prediction Function
# =========================
def predict_blood_group(image_path, model_path="/content/drive/MyDrive/blood_group_classifier.h5"):
    # Load trained model
    model = load_model("/content/drive/MyDrive/blood_group_classifier.h5")

    # Load and preprocess the image
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
    img = cv2.resize(img, (128, 128))
    img = cv2.cvtColor(img, cv2.COLOR_GRAY2RGB)  # Convert grayscale to 3 channels
    img = img / 255.0  # Normalize

    img = np.expand_dims(img, axis=0)  # Add batch dimension

    # Predict
    prediction = model.predict(img)
    class_idx = np.argmax(prediction)
    class_labels = list(train_data.class_indices.keys())  # Get class labels

    return class_labels[class_idx]

# ‚úÖ Example Usage
test_image = "/content/cluster_6_981.BMP"
predicted_group = predict_blood_group(test_image)
print(f"ü©∏ Predicted Blood Group: {predicted_group}")

